local yuri_chr = [[
    SWYgeW91IGZvdW5kIHRoaXMgbm90ZSBpbiBhIHNtYWxsIHdvb2RlbiBib3ggd2l0aCBhIGh
    lYXJ0IG9uIGl0LCB0aGVuICpjb25ncmF0dWxhdGlvbnMhKiBZb3UgYXJlIHByb2JhYmx5IH
    RoZSBmaXJzdCBwZXJzb24gdG8gcmVhZCB0aGlzLiBJIGRpZG7igJl0IHJlYWxseSBwbGFuI
    G9uIHNoYXJpbmcgdGhpcyB3aXRoIGFueWJvZHksIGJ1dCBmb3Igc29tZSByZWFzb24gSSB0
    aGluayBpdOKAmXMgZXhjaXRpbmcgdGhhdCBzb21lYm9keSBvdXQgdGhlcmUsIGEgY29tcGx
    ldGUgc3RyYW5nZXIsIHdpbGwgY29tZSBhY3Jvc3MgdGhpcyBub3RlIGFuZCByZWFkIG15IH
    N0b3J5LiBTb21lb25lIEkgd2lsbCBuZXZlciBtZWV0LCBzaGFyaW5nIHN1Y2ggYSBwZXJzb
    25hbCBib25kIHdpdGggbWUuIEnigJltIGZhc2NpbmF0ZWQgdGhhdCBlaXRoZXIgb25lIG9m
    IHVzIGNvdWxkIGRpZSAtIGV2ZW4gYXMgc29vbiBhcyB0b21vcnJvdyAtIHdpdGggdGhlIG9
    0aGVyIGJlaW5nIGNvbXBsZXRlbHkgY2x1ZWxlc3MgdG8gdGhlIGZhY3QuIFRvIHlvdSwgbX
    kgZW50aXJlIGxpZmUgaXMgd2l0aGluIHRoaXMgbm90ZSwgYW5kIHNvIEkgd2lsbCBsaXZlI
    GZvciBhcyBsb25nIGFzIHlvdXIgbWVtb3J5IGNhbiBjYXJyeSBtZS4gV3JpdGluZyB0aGlz
    LCBJ4oCZbSB3b25kZXJpbmcgaWYgdGhhdCBtYWtlcyB5b3UgZmVlbCBmYXNjaW5hdGVkIG9
    yIHZpb2xhdGVkLiBJdOKAmXMgc28gZXhjaXRpbmcuDQoNCknigJltIHNvcnJ5IGlmIG15IH
    N0b3J5IGlzIGEgYml0IGRpc29yZ2FuaXplZCwgYnV0IEnigJlkIGxpa2UgdG8gZ2V0IGl0I
    GRvd24gd2hpbGUgaXTigJlzIHN0aWxsIGZyZXNoIG9uIG15IG1pbmQuIEZpcnN0LCBJ4oCZ
    bGwgdGVsbCB5b3UgYSBsaXR0bGUgYml0IGFib3V0IG15c2VsZi4gSeKAmW0gYSBmaXJzdC1
    5ZWFyIGNvbGxlZ2UgZ2lybCBhbmQgaGF2ZSBsZWQsIGJ5IG1vc3Qgc3RhbmRhcmRzLCBhIH
    ByZXR0eSB1bnNwZWN0YWN1bGFyIGxpZmUgdXAgdG8gdGhpcyBwb2ludC4gSSBncmV3IHVwI
    GluIGFuIHVwcGVyLW1pZGRsZSBjbGFzcyBzY2hvb2wgZGlzdHJpY3Qgd2l0aCBkZWNlbnQg
    dGVhY2hlcnMuIEkgZGlkIHRyYWNrIGluIG1pZGRsZSBzY2hvb2wgYW5kIHNvbWUgb2YgaGl
    naCBzY2hvb2wsIGFuZCBJ4oCZdmUgaGFkIHR3byBib3lmcmllbmRzLiBOb3csIEnigJltIH
    N0dWR5aW5nIGZvciBhIGNhcmVlciBpbiBvY2N1cGF0aW9uYWwgdGhlcmFweSwgYmVjYXVzZ
    SBJIGZlZWwgdGhlIGZpZWxkIGlzIHVuZGVydmFsdWVkIGFuZCBwcm92aWRlcyB0cmVtZW5k
    b3VzIGhlbHAgdG8gcGVvcGxlLg0KDQpJ4oCZbSBnaXZpbmcgeW91IHRoaXMgYmFja2dyb3V
    uZCBiZWNhdXNlIHRoZXJl4oCZcyB0aGlzIHN0cmFuZ2UgbWlzY29uY2VwdGlvbiB0aGF0IG
    lmIHlvdSB3YW50IHRvIGtpbGwgc29tZW9uZSB0aGVuIHlvdeKAmXJlIGVpdGhlciBzaWNrI
    GluIHRoZSBoZWFkIG9yIHlvdSBoYXZlIGFuZ2VyIG1hbmFnZW1lbnQgaXNzdWVzLiBCdXQs
    IGl04oCZcyB2ZXJ5IGFwcGFyZW50IHRoYXQgSSBkb27igJl0IGZhbGwgaW50byBlaXRoZXI
    gb2YgdGhvc2UgY2F0ZWdvcmllcy4gSXTigJlzIHRydWUgdGhhdCBtb3N0IG11cmRlciBjYX
    NlcyBhcmUgaW4gYSBkb21lc3RpYyBzZXR0aW5nIHdoZXJlIHNvbWVvbmUgbG9zZXMgY29ud
    HJvbCBvZiB0aGVpciBhbmdlciBvciBzb21ldGhpbmcuIEJ1dCB0aGUgdGhpbmcgaXMgdGhh
    dCB0aG9zZSBwZW9wbGUga2lsbCB1bmRlciBwcm92b2NhdGlvbiwgd2hldGhlciBieSBhIHN
    pbmd1bGFyIG91dGJ1cnN0IG9yIGJ5IGEgc2xvdy1idXJuaW5nIHNlcmllcyBvZiBtaXNmb3
    J0dW5lcy4gVGhvc2UgcGVvcGxlIGtpbGwgYmVjYXVzZSBpbiB0aGF0IGJyaWVmIG1vbWVud
    CwgdGhleSB3YW50IGEgc3BlY2lmaWMgc29tZW9uZSwgZm9yIGEgc3BlY2lmaWMgcmVhc29u
    LCB0byBiZSBodXJ0IG9yIGtpbGxlZC4NCg0KV2hhdCBJ4oCZbSB0YWxraW5nIGFib3V0IGl
    zIHdhbnRpbmcgdG8ga2lsbCBzb21lb25lIGZvciBubyBzcGVjaWZpYyByZWFzb24sIG1heW
    JlIGp1c3QgdG8gc2VlIHdoYXQgaXTigJlzIGxpa2UuIERvIHlvdSBldmVyIGdldCB0aGF0P
    yBJIHdvdWxkbuKAmXQga25vdyBob3cgb3RoZXJzIGZlZWwsIGJlY2F1c2UgaXTigJlzIG5v
    dCBzb21ldGhpbmcgSSBldmVyIHRhbGtlZCBhYm91dC4gQnV0IEnigJl2ZSBiZWVuIGN1cml
    vdXMgYWJvdXQgd2hhdCBpdOKAmXMgbGlrZSB0byBraWxsIHNvbWVvbmUgZXZlciBzaW5jZS
    BJIHdhcyBhIGNoaWxkLiBOb3Qga2lsbGluZyBhbnlvbmUgaW4gcGFydGljdWxhciwganVzd
    CBhIHJhbmRvbSBwZXJzb24uIEl04oCZcyBhbHdheXMganVzdCBmYXNjaW5hdGVkIG1lIHRo
    YXQgaWYgSSBwdXQgbXkgbWluZCB0byBpdCwgSSBjYW4gYXBwcm9hY2ggYW55b25lLCBhbmQ
    gaW4gZml2ZSBtaW51dGVzIHRoZXkgd291bGQgYmUgY29tcGxldGVseSBnb25lIGZyb20gdG
    hpcyBFYXJ0aC4NCg0KQnV0IEnigJl2ZSBuZXZlciBkb25lIHNvIGZvciBhIGNvdXBsZSBvZ
    iByZWFzb25zLiBGaXJzdCBvZiBhbGwsIGZvciBtb3N0IG9mIG15IGxpZmUgaXQgd2FzIGxv
    Z2lzdGljYWxseSBpbXBvc3NpYmxlIGZvciBtZSB0byBkbyBpdCB3aXRob3V0IGdldHRpbmc
    gY2F1Z2h0LiBJIG9ubHkgZ290IG15IGRyaXZlcuKAmXMgbGljZW5zZSBhIGNvdXBsZSB5ZW
    FycyBhZ28sIGFuZCBldmVuIHRoZW4sIHRoZSBwcmVwYXJhdGlvbnMgd291bGQgdGFrZSB0b
    28gbXVjaCB0aW1lLCBkZWZpbml0ZWx5IHN0aXJyaW5nIHN1c3BpY2lvbi4gSXQgd2FzIG9u
    bHkgb25jZSBJIHN0YXJ0ZWQgY29sbGVnZSB0aGF0IEkgcmVhbGl6ZWQgdGhpcyB3YXMgbm8
    gbG9uZ2VyIGFuIG9ic3RhY2xlLg0KDQpBbm90aGVyIHJlYXNvbiBpcyB0aGF0IEkgd2FzIG
    FmcmFpZCBvZiBjYXVzaW5nIGhhcm0gdG8gdG9vIG1hbnkgcGVvcGxlLiBZb3UgbWlnaHQgb
    GF1Z2ggcmVhZGluZyB0aGF0LCBhdCBob3cgaHlwb2NyaXRpY2FsIGl0IHNvdW5kcy4gQnV0
    LCBsZXQgbWUgZXhwbGFpbjogV2h5IHNob3VsZCBJIGZlZWwgYmFkIGFib3V0IGtpbGxpbmc
    gc29tZW9uZSBpZiB0aGV54oCZcmUgdG9vIGRlYWQgdG8gY2FyZT8gV2hvIHdvdWxkIEkgYm
    UgZmVlbGluZyBiYWQgZm9yPyBDb250cmFyaWx5LCBpdOKAmXMgdGhlIGdyaWVmIG9mIHRoZ
    SBsaXZpbmcgdGhhdCBJ4oCZZCByYXRoZXIgbm90IGJlIHJlc3BvbnNpYmxlIGZvci4gQmVj
    YXVzZSBvZiB0aGlzLCBJIGtuZXcgaXQgd291bGQgdGFrZSBhIGdvb2QgZGVhbCBvZiByZXN
    lYXJjaCBiZWZvcmUgZmluZGluZyBhIHN1aXRhYmxlIHBlcnNvbiB0byBraWxsLCBhbmQgSe
    KAmXZlIG5ldmVyIGhhZCB0aGUgbWVhbnMgdG8gZG8gc28gLSBhZ2FpbiwgdW50aWwgSSBzd
    GFydGVkIGNvbGxlZ2UuDQoNCkFuZCBub3csIGhhdmluZyBqdXN0IGV4cGVyaWVuY2VkIGl0
    LCBJ4oCZZCBzYXkgaXQgd2FzIHByZXR0eSBzYXRpc2Z5aW5nIGluIHRoZSBlbmQuIFNvbWV
    0aGluZyBJIHdvdWxkIHRyeSBhZ2Fpbj8gUHJvYmFibHkgbm90LCBzaW5jZSBteSBjdXJpb3
    NpdHkgaGFzIGFscmVhZHkgYmVlbiBzYXRpc2ZpZWQuIEl0IHJlYWxseSB3b3VsZG7igJl0I
    GJlIHRoZSBzYW1lIGEgc2Vjb25kIHRpbWUuDQoNCkJ1dCBhbnl3YXksIGlmIGJ5IGFueSBj
    aGFuY2UgeW914oCZcmUgYWxzbyBjdXJpb3VzIHRvIGtpbGwgc29tZW9uZSwgdGhlbiB5b3X
    igJlyZSB3ZWxjb21lIHRvIHRha2Ugbm90ZXMuIDopDQoNCioqKg0KDQpJIHN0YXJ0ZWQgYS
    Bob2JieSBvZiBwZW9wbGUtd2F0Y2hpbmcgc29vbiBhZnRlciBJIGVudGVyZWQgY29sbGVnZ
    S4gUGVvcGxlLXdhdGNoaW5nIGlzIGludGVyZXN0aW5nIHRvIG1lIGJlY2F1c2UgaXTigJlz
    IHRha2luZyBvbmUgb2YgdGhlIGluZmluaXRlIGV4dHJhcyBpbiB5b3VyIGxpZmUgYW5kIHR
    1cm5pbmcgdGhlbSBpbnRvIGEgbWFpbiBjaGFyYWN0ZXIgLSB3aXRob3V0IHRoZW0ga25vd2
    luZywgb2YgY291cnNlLiBJdOKAmXMgc28gZWFzeSB0byBmb3JnZXQgdGhhdCBldmVyeSBza
    W5nbGUgb25lIG9mIHRoZSBodW5kcmVkcyBvZiBzdHJhbmdlcnMgeW91IHBhc3MgZXZlcnkg
    ZGF5IGhhcyBhIGxpZmUgc3RvcnkgYXMgZGVlcCBhbmQgY29tcGxleCBhcyB5b3VyIG93bi4
    gT25lIHRoaW5nIEkgbm90aWNlZCBhYm91dCBwZW9wbGUtd2F0Y2hpbmcsIGFuZCB3YW50aW
    5nIHRvIGtpbGwgc29tZW9uZSwgaXMgdGhhdCB5b3UgYXJlIGluIG1vcmUgY29uc3RhbnQgY
    XdhcmVuZXNzIG9mIHRoaXMuIFdoZW4gSSBmaW5kIGEgcGVyc29uIHRvIG9ic2VydmUsIHRo
    ZWlyIHN0b3J5IHNsb3dseSBiZWNvbWVzIG1vcmUgY2xlYXIgdG8gbWUgb3ZlciB0aW1lLCB
    nYXBzIGJlaW5nIGZpbGxlZCAtIGl0IHJlYWxseSBpcyBhbWF6aW5nLg0KDQpJIHVzdWFsbH
    kgd2VudCB0byBncm9jZXJ5IHN0b3JlcyBvbiB3ZWVrZW5kcyBhbmQgbG9va2VkIGFyb3VuZ
    CBpbiBwZW9wbGXigJlzIHNob3BwaW5nIGNhcnRzLiBJZiBJIHNhdyBzb21ldGhpbmcgdGhh
    dCBpbnRlcmVzdGVkIG1lLCBJIGRlY2lkZWQgdG8gb2JzZXJ2ZSB0aGUgcGVyc29uIGZvciB
    hIGxpdHRsZSBiaXQuIE9mIGNvdXJzZSwgc2luY2UgbXkgZ29hbCB3YXMgdG8gZmluZCBzb2
    1lb25lIHRvIGtpbGwsIEkgcnVsZWQgb3V0IGFueW9uZSB3aG8gaGFkIGNoaWxkcmVuIG9yI
    GEgcGFydG5lciB3aXRoIHRoZW0uIFdlZGRpbmcgcmluZ3Mgd2VyZSBhbm90aGVyIHRlbGwt
    dGFsZSBzaWduLg0KDQpTbyBtYXliZSBvbmNlIGEgd2Vla2VuZCwgSSB3b3VsZCBmaW5kIHN
    vbWVvbmUgd2hvIGZpdCBteSBjcml0ZXJpYSwgYXQgd2hpY2ggcG9pbnQgSSB3b3VsZCBmb2
    xsb3cgdGhlbSBob21lIGFuZCBub3RlIHRoZWlyIGFkZHJlc3MuIEZyb20gdGhlcmUsIGl0I
    GJlY2FtZSBpbmNyZWRpYmx5IGVhc3kgdG8gaW52ZXN0aWdhdGUgYSBsaXR0bGUgYml0IG1v
    cmU7IG1vc3QgcGVvcGxlIGhhdmUgbm9ybWFsIHdvcmsgaG91cnMsIG1lYW5pbmcgSSBjb3V
    sZCBzcGVuZCBhZnRlcm5vb25zIGdvaW5nIHRocm91Z2ggdGhlaXIgbWFpbCBvciBsb29raW
    5nIGFyb3VuZCBpbiB0aGVpciBob3VzZS4gSSByZXBlYXRlZCB0aGlzIHdpdGggc2V2ZXJhb
    CBwZW9wbGUgKGFuZCBoYWQgb25lIGNsb3NlIGNhbGwpLCBidXQgZm9yIHZhcnlpbmcgcmVh
    c29ucyBJIGRpZG7igJl0IHJlYWxseSBmZWVsIHNhdGlzZmllZCBlbm91Z2ggd2l0aCB0aGV
    tIHRvIGtpbGwgYW55IG9mIHRoZW0uDQoNCkkgc3RhcnRlZCBnZXR0aW5nIGEgYml0IGltcG
    F0aWVudCBhbmQgdGhvdWdodCB0aGF0IEkgbWlnaHQganVzdCBzZXR0bGUgZm9yIGtpbGxpb
    mcgdGhlIG1hbiBuYW1lZCBEZXZvbiwgZXZlbiB0aG91Z2ggSSBkaWRu4oCZdCByZWFsbHkg
    d2FudCB0byBraWxsIHNvbWVvbmUgd2VhbHRoeS4gQnV0IHRoZW4sIEkgY2FtZSBhY3Jvc3M
    gc29tZW9uZSBuZXcgLSBzb21lb25lIHdobyBqdXN0LCBmZWx0IHBlcmZlY3QuIFRoZSBmZW
    VsaW5nIG9ubHkgc3RyZW5ndGhlbmVkIGFzIEkgaW52ZXN0aWdhdGVkIGhlciBmdXJ0aGVyL
    CBhbmQgSSBrbmV3IHRoYXQgc2hlIHdvdWxkIGJlIHRoZSBvbmUgZm9yIG1lIHRvIGtpbGwu
    DQoNCkEgeW91bmctbG9va2luZyB3b21hbiBJIG1ldCBhdCB0aGUgZ3JvY2VyeSBzdG9yZSw
    gYXMgcGVyIHVzdWFsLiBTaGUgd2FzIGRvaW5nIHNvbWUgbGlnaHQgc2hvcHBpbmcgd2l0aC
    BhIGJhc2tldC4gSGVyIGhhaXIgd2FzIHdhdnkgYW5kIGRhcmsgYnJvd24sIHNpdHRpbmcga
    W5lbGVnYW50bHkgb24gaGVyIHNsdW1wZWQgc2hvdWxkZXJzIGFuZCBzdXJyb3VuZGluZyBo
    ZXIgdGlyZWQtbG9va2luZyBmYWNlLiBIZXIgYmFyZSBmaW5nZXJzIHRvbGQgbWUgc2hlIG1
    pZ2h0IGJlIHNpbmdsZSwgYnV0IGJleW9uZCB0aGF0LCBteSBndXQgd2FzIGFsbW9zdCBjZX
    J0YWluIG9mIGl0LiBUaGlzIHdvbWFuIGp1c3Qgc2VlbWVkIHNv4oCmcGxhaW4sIHJlYWxse
    S4gSSBndWVzcyBJIGZlbHQgYSBncmVhdGVyIGFjdWl0eSBmb3IgdGhlIHBlcnNvbmFsIGxp
    dmVzIG9mIHN0cmFuZ2VycyBldmVyIHNpbmNlIEkgc3RhcnRlZCBteSBwZW9wbGUtd2F0Y2h
    pbmcuIEJ1dCB0aGUgd2F5IHNoZSBjYXJyaWVkIGhlcnNlbGYsIEkganVzdCBnb3QgdGhlIG
    ZlZWxpbmcgdGhhdCBpZiBzaGUgc3VkZGVubHkgZGllZCwgbm9ib2R5IHdvdWxkIGJlIGFyb
    3VuZCB0byBtaXNzIGhlci4gT2YgY291cnNlLCBJIHN0aWxsIHdhbnRlZCB0byBpbnZlc3Rp
    Z2F0ZSBoZXIgYSBiaXQuDQoNCkkgZm9sbG93ZWQgbXkgdXN1YWwgcm91dGluZSBvZiBjaGV
    ja2luZyBvdXQgaGVyIHBsYWNlIGR1cmluZyBoZXIgd29yayBob3Vycy4gSSBsZWFybmVkIG
    ltbWVkaWF0ZWx5IGZyb20gaGVyIG1haWwgdGhhdCBoZXIgbmFtZSBpcyBMaW5kYSBXYXRzb
    24uIExpbmRhIGxpdmVkIGluIGEgcXVpZXQgYXBhcnRtZW50IGNvbXBsZXgsIGhlciBtYWls
    Ym94IGVhc2lseSBhY2Nlc3NpYmxlIHJpZ2h0IG91dHNpZGUgaGVyIGRvb3IuIEluc3RlYWQ
    gb2YgcXVpY2tseSBzaHVmZmxpbmcgdGhyb3VnaCBpdCwgSSBkZWNpZGVkIEkgY291bGQgdG
    FrZSBoZXIgbWFpbCBiYWNrIHRvIG15IGRvcm0gYW5kIHJldHVybiBpdCBiZWZvcmUgc2hlI
    HdhcyBmaW5pc2hlZCB3aXRoIHdvcmsgKHNoZSBvbmx5IGxpdmVkIGFib3V0IDE1IG1pbnV0
    ZXMgZnJvbSBtZSkuIEkgZGlkIHNvbWUgcmVzZWFyY2ggYW5kIGxlYXJuZWQgaG93IHRvIG9
    wZW4gYW5kIHJlc2VhbCB0aGUgZW52ZWxvcGVzIHdpdGhvdXQgZGFtYWdpbmcgdGhlbSwgd2
    hpY2ggdG9vayBzb21lIHRlY2huaXF1ZSBhbG9uZyB3aXRoIGEgaGFpciBkcnllciwgcnViY
    mluZyBhbGNvaG9sLCBhbmQgUS10aXBzLg0KDQpUaGlzIG1hZGUgaXQgZWFzeSBmb3IgbWUg
    dG8gbGVhcm4gYSBsaXR0bGUgbW9yZSBhYm91dCBoZXIuIExpbmRhIHdhcyBhIDMzLXllYXI
    tb2xkIHdvbWFuIHdobyB3b3JrZWQgZm9yIGEgc21hbGwgYWNjb3VudGluZyBmaXJtIC0gSe
    KAmWQgcmF0aGVyIG5vdCBuYW1lIHRoZSBwbGFjZSBvdXRyaWdodC4gSGVyIGJpcnRoZGF5I
    HdhcyBEZWNlbWJlciAxMXRoIHdoaWNoLCBjb2luY2lkZW50YWxseSwgd2FzIGFwcHJvYWNo
    aW5nIGluIGEgY291cGxlIHdlZWtzLiBJIGFsc28gbWFuYWdlZCB0byBmaW5kIGEgYmFuayB
    zdGF0ZW1lbnQgdGhhdCBnYXZlIG1lIGEgbmljZSBsb29rIGludG8gaG93IHNoZeKAmXMgYm
    VlbiBzcGVuZGluZyBoZXIgcGFzdCBtb250aC4gSXQgd2FzIGF0IHRoaXMgcG9pbnQgSSByZ
    WFsaXplZCB0aGF0IG15IGFzc2Vzc21lbnQgb2YgTGluZGEgV2F0c29uIGFzIGFuIGV4dHJl
    bWVseSBwbGFpbiB3b21hbiB3YXMgcHJldHR5IHNwb3Qtb24sIGJlY2F1c2UgdGhlcmUgd2F
    zIGFic29sdXRlbHkgbm90aGluZyBpbnRlcmVzdGluZyBvbiB0aGUgbGlzdC4gQSB0cmlwIH
    RvIE9sZCBOYXZ5LCBhIGJ1bmNoIG9mIFN0YXJidWNrcywgc29tZXRoaW5nIGFib3V0ICQ0M
    CBmcm9tIEFtYXpvbiAtIG5vIHJlc3RhdXJhbnRzLCBubyBtb3ZpZXMsIG5vdGhpbmcgdGhh
    dCB3b3VsZCByZWFsbHkgaW1wbHkgc2hlIHdhcyBzcGVuZGluZyBhbnkgdGltZSBzb2NpYWx
    pemluZy4gVGhhdCBhc2lkZSwgSSBhbHNvIGZvdW5kIGEgY29va2luZyBtYWdhemluZSwgc2
    8gSSBndWVzcyBzaGUgd2FzIGludG8gY29va2luZy4NCg0KQXBhcnRtZW50cyBhcmUgaGFyZ
    GVyIHRvIGJyZWFrIGludG8gdGhhbiBzdWJ1cmJhbiBob21lcywgYmVjYXVzZSB0aGVyZSBh
    cmUgZmV3ZXIgZG9vcnMgYW5kIHdpbmRvd3MuIEV2ZXJ5IHRpbWUgSSBnb3QgTGluZGHigJl
    zIG1haWwsIEkgd291bGQgY2hlY2sgdGhlIGZyb250IGRvb3IgYW5kIHRoZSB3aW5kb3dzIG
    luIHRoZSBiYWNrLCBidXQgdGhleSB3ZXJlIGFsd2F5cyBsb2NrZWQuIFRoaXMgd2FzIGEgY
    ml0IGZydXN0cmF0aW5nIGJlY2F1c2UgSSB3YXMgcmVhbGx5IGludGVyZXN0ZWQgaW4gZ2V0
    dGluZyBpbnRvIGhlciBob3VzZS4gU28sIEkgY2FtZSB1cCB3aXRoIGEgc29ydCBvZiBwbGF
    uIHRoYXQgSSB0aG91Z2h0IHdvdWxkIGJlIGZ1biwgZXZlbiBpZiBpdCBkaWRu4oCZdCB3b3
    JrLg0KDQpMYXN0IFNhdHVyZGF5LCBJIHZpc2l0ZWQgTGluZGEgV2F0c29u4oCZcyBhcGFyd
    G1lbnQgY29tcGxleCBhcyBJIHdvdWxkIG9uIHdlZWtkYXlzLiBUaGUgZGlmZmVyZW5jZSBp
    cyB0aGF0IHRoaXMgdGltZSwgSSB3YW50ZWQgaGVyIHRvIGJlIGhvbWUuIEkgdGhvdWdodCB
    pdCB3b3VsZCBiZSBpbnRlcmVzdGluZyB0byBoYXZlIGEgY29udmVyc2F0aW9uIHdpdGggaG
    VyLiBJZiBJIGdvdCBsdWNreSwgSSBjb3VsZCB0YWtlIGFkdmFudGFnZSBvZiB0aGUgc2l0d
    WF0aW9uIHRvIGRpc2NyZWV0bHkgdW5sb2NrIGEgd2luZG93IGZyb20gdGhlIGluc2lkZS4g
    U28sIEkgd2Fsa2VkIHVwIHRvIGhlciBkb29yIHdlYXJpbmcgbm90aGluZyB3YXJtZXIgdGh
    hbiBhIGxpZ2h0IHN3ZWF0c2hpcnQsIGFuZCBrbm9ja2VkLiBUaGUgYWRyZW5hbGluZSBydX
    NoIHdhcyBjcmF6eS4gSSB3YXMgYWZyYWlkIEkgbWlnaHQgc2NyZXcgc29tZXRoaW5nIHVwL
    g0KDQpUaGUgZG9vciBvcGVuZWQsIGFuZCBpbiBmcm9udCBvZiBtZSBzdG9vZCBMaW5kYSBX
    YXRzb24sIGV4YWN0bHkgYXMgSSByZW1lbWJlcmVkIGhlciBmcm9tIHRoZSBncm9jZXJ5IHN
    0b3JlLiBJdCB3YXMgYXQgdGhhdCBtb21lbnQsIG1ha2luZyBleWUgY29udGFjdCBmb3IgdG
    hlIGZpcnN0IHRpbWUsIHRoYXQgSSByZWFsaXplZCBJIHdhcyBydW5uaW5nIHRoZSByaXNrI
    G9mIGJlZ2lubmluZyB0byBjYXJlIGFib3V0IHRoaXMgcGVyc29uLiBBcyBzZWxmaXNoIGFz
    IGl0IGlzLCBJIGNvdWxkbuKAmXQga2lsbCBhIHBlcnNvbiBJIGNhcmVkIGFib3V0LCBldmV
    uIGlmIGl04oCZcyBhIDMzLXllYXItb2xkIHdvbWFuIHN0YW5kaW5nIGluIGEgZG9vcndheS
    B3aXRoIGEgc2xpZ2h0bHkgcGVycGxleGVkIGxvb2sgb24gaGVyIGZhY2UsIGdpdmluZyBtZ
    SBhIHJlc2VydmVkIOKAnEhlbGxvLuKAnQ0KDQpBcm1zIGNyb3NzZWQgZnJvbSB0aGUgY29s
    ZCwgSSBzaHlseSByZXR1cm5lZCBMaW5kYeKAmXMgZ3JlZXRpbmcuIEkgZXhwbGFpbmVkIHR
    oYXQgSSB3YXMgd2Fsa2luZyBteSBkb2cgbmVhciB0aGUgd29vZHN5IGFyZWEgYmVoaW5kIH
    RoZSBiYWNrIG9mIGhlciBhcGFydG1lbnQsIGFuZCB0aGF0IGhlIGhhZCBnb3R0ZW4gYXdhe
    S4gSSBoYWQgYmVlbiBsb29raW5nIGZvciBteSBkb2cgZm9yIGFuIGhvdXIgYW5kIHdhcyB3
    b25kZXJpbmcgaWYgTGluZGEgbWF5IGhhdmUgc2VlbiBoaW0gcm9hbWluZyBhYm91dC4gT2Y
    gY291cnNlLCBMaW5kYSBzeW1wYXRoZXRpY2FsbHkgYXBvbG9naXplZCBmb3IgdGhlIHNpdH
    VhdGlvbiBhbmQgdGhhdCBzaGUgY291bGRu4oCZdCBiZSBvZiB1c2UgdG8gbWUsIGJ1dCB0a
    GF0IHNoZSB3b3VsZCBrZWVwIGFuIGV5ZSBvdXQuIEkgd29yZSBhIGRlZmVhdGVkIGV4cHJl
    c3Npb24gaW4gcmVzcG9uc2UsIGFwb2xvZ2l6aW5nIGluIHJldHVybiBmb3IgdHJvdWJsaW5
    nIGhlci4NCg0KSXQgc29tZWhvdyB3ZW50IGV4YWN0bHkgYXMgSSBoYWQgaG9wZWQgLSBMaW
    5kYSBpbnZpdGVkIG1lIGluc2lkZSB0byB3YXJtIHVwIGEgYml0IHdpdGggc29tZSBjb2ZmZ
    WUuIEkgb3V0d2FyZGx5IGhlc2l0YXRlZCBiZWZvcmUgYWNjZXB0aW5nIGhlciBvZmZlciwg
    YWx0aG91Z2ggb24gdGhlIGluc2lkZSBJIHdhbnRlZCB0byBqdW1wIHRocm91Z2ggdGhlIGR
    vb3IgYW5kIGh1ZyBoZXIgZm9yIGNvb3BlcmF0aW5nIHNvIHdlbGwuIEFuZCB0aGF04oCZcy
    Bob3cgTGluZGEgV2F0c29uIGVuZGVkIHVwIHdpdGggYSAxOS15ZWFyLW9sZCBnaXJsIG5le
    HQgdG8gaGVyIG9uIHRoZSBjb3VjaCAtIHdobyBrbm93cyBpZiBpdCB3YXMganVzdCBhIG5p
    Y2UgZ2VzdHVyZSBvciBpZiBzaGUgcmVhbGx5IGhhcyBubyBiZXR0ZXIgd2F5IHRvIHNwZW5
    kIGhlciBTYXR1cmRheXMgdGhhbiB0YWxraW5nIHRvIHNvbWUga2lkIHNoZSBqdXN0IG1ldC
    Aod2hvIGhhcHBlbnMgdG8gYmUgaW50ZXJlc3RlZCBpbiBraWxsaW5nIGhlcikuDQoNCkxpb
    mRhIHNvb24gbGVhcm5lZCB0aGF0IG15IG5hbWUgaXMgTWFyaWEgKGl04oCZcyBub3QpIGFu
    ZCB0aGF0IEkgYXR0ZW5kIHRoZSBuZWFyYnkgY29tbXVuaXR5IGNvbGxlZ2UgKEkgZG9u4oC
    ZdCkuIEkgd2FzIGEgbGl0dGxlIGJpdCBuZXJ2b3VzIHRoYXQgc2hlIHdvdWxkIGFzayBtZS
    B0b28gbWFueSBxdWVzdGlvbnMgYmVjYXVzZSBJIGRpZG7igJl0IGhhdmUgbWFueSBhbnN3Z
    XJzIHByZXBhcmVkLiBJIHdhcyBhYmxlIHRvIHN0ZWVyIHRoZSBjb252ZXJzYXRpb24gdG93
    YXJkIGhlciwgYW5kIHNoZSB3YXMgcHJldHR5IGhhcHB5IHRvIHRhbGsuIEkgYXNrZWQgd2h
    hdCBzaGUgZG9lcywgYW5kIHNoZSB0b2xkIG1lIHRoYXQgc2hlIHdvcmtzIGZvciB0aGUgYW
    Njb3VudGluZyBmaXJtIEkgYWxyZWFkeSBrbmV3IGFib3V0LCBjb21tdW5pY2F0aW5nIHdpd
    Gggb3V0c2lkZSBjbGllbnRzIGFuZCBrZWVwaW5nIHJlY29yZHMuIEkgdG9sZCBoZXIgSSB3
    YXMgcHJldHR5IG5lcnZvdXMgYWJvdXQgZ3Jvd2luZyB1cC4gU2hlIHRvbGQgbWUgdG8gZW5
    qb3kgY29sbGVnZSBhbmQgdG8gbWFrZSBsb3RzIG9mIGZyaWVuZHMgYmVjYXVzZSB0aGVyZe
    KAmXMgbGVzcyBvcHBvcnR1bml0eSBvbmNlIHlvdSBzdGFydCB3b3JraW5nLg0KDQpXaGVuI
    EkgYXNrZWQgaWYgc2hlIHdhcyBtYXJyaWVkIG9yIGFueXRoaW5nLCBzaGUgbGF1Z2hlZC4g
    T2YgY291cnNlIEkga25ldyBzaGUgd2FzbuKAmXQgbWFycmllZCwgYnV0IEkgd2FudGVkIHR
    vIGhlYXIgbW9yZSBhYm91dCBoZXIgbG92ZSBsaWZlLiBTaGUgc2FpZCB0aGF0IHNoZSBkb2
    VzbuKAmXQgY3VycmVudGx5IGhhdmUgYSBib3lmcmllbmQgKEkgZ3Vlc3Mgc2hl4oCZcyBhd
    CBsZWFzdCBoYWQgYm95ZnJpZW5kcywgYnV0IHdobyBrbm93cyBob3cgbG9uZyBhZ28pLiBX
    aGVuIEkgYXNrZWQgaGVyIGFib3V0IGtpZHMsIHNoZSBzYWlkIHNoZSBkb2VzbuKAmXQgd2F
    udCB0aGVtIHVudGlsIHNoZSBnZXRzIGEgYmV0dGVyIGpvYi4gT24gdG9wIG9mIHRoYXQsIH
    NoZSB0b2xkIG1lIHRoYXQgaGVyIGZhbWlseSBoYXMgYSBoaXN0b3J5IG9mIHNvbWUgZ2VuZ
    XRpYyBkaXNlYXNlcyBzdWNoIGFzIGFydGhyaXRpcyBhbmQgZGVwcmVzc2lvbiwgd2hpY2gg
    c2hlIGlzIGFmcmFpZCB0byBnaXZlIHRvIGhlciBraWRzLg0KDQpJdOKAmXMgZnVubnkgdGh
    hdCBzaGUgbWVudGlvbmVkIHRoYXQgYmVjYXVzZSB3aGVuIEkgYXNrZWQgdG8gdXNlIGhlci
    BiYXRocm9vbSwgSSBub3RpY2VkIGEgdHViZSBvZiBwcmVzY3JpcHRpb24gcGlsbHMgb24gd
    GhlIHNpbmsuIEl0IHdhcyBsYWJlbGxlZCBkdWxveGV0aW5lLCB3aGljaCBJIGxvb2tlZCB1
    cCBsYXRlciBhbmQgZGlzY292ZXJlZCB0aGF0IGl0IGlzIGluIGZhY3QgYW4gYW50aWRlcHJ
    lc3NhbnQuIEkgaGFkIGEgam9raW5nIHRob3VnaHQgdGhhdCBtYXliZSBieSBraWxsaW5nIG
    hlciBJ4oCZZCBiZSBkb2luZyBoZXIgYSBmYXZvciwgYnV0IHF1aWNrbHkgZGVjaWRlZCBJI
    HdhcyBhIHRlcnJpYmxlIHBlcnNvbiBmb3IgY29taW5nIHVwIHdpdGggdGhhdC4NCg0KVGhl
    IHJlc3Qgb2YgdGhlIHZpc2l0IHdhcyBwcmV0dHkgZHVsbC4gV2UgdGFsa2VkIGFib3V0IGZ
    vb2QgYW5kIHNvbWUgb3RoZXIgbXVuZGFuZSBzdHVmZiBiZWZvcmUgSSBldmVudHVhbGx5IG
    1hZGUgYW4gZXhjdXNlIHRvIGxlYXZlLiBJIGRpZG7igJl0IGdldCB0aGUgY2hhbmNlIHRvI
    HVubG9jayBhIHdpbmRvdyBvciBhbnl0aGluZyBsaWtlIHRoYXQsIGJ1dCBJIGRpZG7igJl0
    IHJlYWxseSBmZWVsIHRoZSBuZWVkIHRvIGdvIHRocm91Z2ggaGVyIGFwYXJ0bWVudCBhbnl
    tb3JlLiBBcyBlYXJseSBhcyB0aGUgZHJpdmUgYmFjayB0byBteSBkb3JtLCBJIHdhcyBhbH
    JlYWR5IHRoaW5raW5nIGFib3V0IGhvdyBJIHdvdWxkIGJlc3QgbGlrZSB0byBraWxsIExpb
    mRhIFdhdHNvbi4NCg0KVGhlIGNob2ljZSB3YXMgYmV0d2VlbiBlZmZlY3RpdmVuZXNzIGFu
    ZCBmdW4uIEkgZGVjaWRlZCB0byBnbyB3aXRoIGZ1biwgYmVjYXVzZSBpdCB3b3VsZCBiZSB
    3YXkgbW9yZSBzYXRpc2Z5aW5nIHRvIGtpbmQgb2YgZGlzc2VjdCBoZXIgYXMgSSBraWxsZW
    QgaGVyLCByYXRoZXIgdGhhbiBqdXN0IGdldHRpbmcgaXQgZG9uZSBhbmQgY2FsbGluZyBpd
    CBhIGRheS4gRmFzdC1mb3J3YXJkIG9uZSB3ZWVrIHRvIERlY2VtYmVyIDEzdGggLSB0b2Rh
    eSwgYWN0dWFsbHkuIExpbmRhIFdhdHNvbiB0dXJuZWQgMzQgdHdvIGRheXMgYWdvLiBJIG1
    hZGUgYSBmdW4gbGl0dGxlIHdhZ2VyIHdpdGggbXlzZWxmIHdoZXJlIGlmIExpbmRhIHdhcy
    BzcGVuZGluZyBoZXIgYmlydGhkYXkgd2Vla2VuZCBhbG9uZSwgSSB3b3VsZCBwYXkgaGVyI
    GEgdmlzaXQgYW5kIGtpbGwgaGVyLiBJZiBzaGUgd2FzIG91dCBvciBoYWQgY29tcGFueSwg
    SSB3b3VsZCBzdG9wIGJ5IG5leHQgd2VlayBvciBzb21ldGhpbmcgaW5zdGVhZC4NCg0KU28
    gdGhpcyBtb3JuaW5nLCBJIGRyb3ZlIG92ZXIgdG8gTG93ZeKAmXMgYW5kIGJvdWdodCBhbi
    BheGUuIEFnYWluLCBJIGV4cGVjdCB5b3XigJlyZSBsYXVnaGluZywgYnV0IHRoYXTigJlzI
    GFsc28ga2luZCBvZiB0aGUgcG9pbnQuIEFuIGF4ZSBpcyBzbyBraW5kIG9mIGNsaWNoZSBh
    bmQgYSDigJxtb3ZpZXPigJ0gdGhpbmcgdGhhdCBJIGFjdHVhbGx5IHRob3VnaHQgaXQgd29
    1bGQgYmUgdGhlIG1vc3QgZnVuLiBTd2luZ2luZyBpdCBhdCBzb21lb25lIGFuZCBldmVyeX
    RoaW5nLCBpdOKAmXMgYSByZWFsbHkgZW50ZXJ0YWluaW5nIGltYWdlLiBUaGV5IGFjdHVhb
    Gx5IGhhZCBhIGJ1bmNoIG9mIGRpZmZlcmVudCBheGVzLCBzbyBJIHBpY2tlZCBvbmUgdGhh
    dCBoYWQgYSBnb29kIHdlaWdodCBidXQgd2FzIHN0aWxsIGxpZ2h0IGVub3VnaCBmb3IgbWU
    gdG8gc3dpbmcgcXVpY2tseS4NCg0KVGhlIGRyaXZlIGFmdGVyIGdldHRpbmcgdGhlIGF4ZS
    B3YXMgd2hlbiB0aGUgYWRyZW5hbGluZSByZWFsbHkgcGlja2VkIHVwLiBBbGwgdGhhdCBrZ
    XB0IGdvaW5nIHRocm91Z2ggbXkgbWluZCBvbiB0aGUgd2F5IG92ZXIgd2FzIOKAnFdvdywg
    SeKAmW0gcmVhbGx5IGRvaW5nIHRoaXMu4oCdIE5vdCBpbiBhIGJhZCB3YXksIGp1c3QgbGl
    rZSBhIHN1cnByaXNlZCB0aGlzIGlzIHJlYWwgbGlmZSBzb3J0IG9mIHRoaW5nLiBJIGFsc2
    8gZ290IHRoaXMgc3RyYW5nZSBydXNoIG9mIHJlY29sbGVjdGlvbnMgb2YgdGhlIHRpbWUgS
    SBzcGVudCB3aXRoIExpbmRhLiBJdCB3YXMgbGlrZSBteSBsaWZlIHdhcyBmbGFzaGluZyBi
    ZWZvcmUgbXkgZXllcywgZXhjZXB0IGl0IHdhcyBqdXN0IHRoZSByYXRoZXIgbXVuZGFuZSB
    ob3VyIEkgc3BlbnQgd2l0aCBMaW5kYSAtIGxpa2Ugc25pcHBldHMgb2Ygb3VyIGNvbnZlcn
    NhdGlvbnMsIHRoZSBzb3VuZCBvZiBoZXIgbGF1Z2gsIGhlciBmYWNpYWwgZXhwcmVzc2lvb
    nMgYW5kIHN0dWZmLg0KDQpJIGFsc28gd29uZGVyZWQgdG8gbXlzZWxmIHdoYXQgdGhlIGNy
    YXp5IHNlcmlhbCBraWxsZXJzIHdvdWxkIGJlIGZlZWxpbmcgYXQgYSB0aW1lIGxpa2UgdGh
    pcyAtIHNjaGl6b3BocmVuaWMgZGVsdXNpb25zPyBTZXh1YWwgYnVpbGR1cD8gSSBoYXZlIG
    5vIGlkZWEsIGJ1dCB3aGF0IEkgZmVsdCB3YXMga2luZCBvZiBsaWtlIHJpZGljdWxvdXNse
    SBhbGVydCBhbmQgbnVtYiBpbiB0aGUgc2Vuc2VzIGF0IHRoZSBzYW1lIHRpbWUsIGhvd2V2
    ZXIgdGhhdOKAmXMgcG9zc2libGUuDQoNCkJlZm9yZSBnZXR0aW5nIG91dCBvZiB0aGUgY2F
    yLCBJIGhhZCB0aGUgc2Vuc2UgdG8gc3R1ZmYgdGhlIGF4ZSBpbnRvIG15IGJhY2twYWNrIH
    RvIGxvb2sgYSBsaXR0bGUgbGVzcyByaWRpY3Vsb3VzIHdhbGtpbmcgYWNyb3NzIHRoZSBwY
    XJraW5nIGxvdC4gVGhlIGhhbmRsZSB3YXMgc3RpY2tpbmcgb3V0LCBidXQgdGhhdCBkaWRu
    4oCZdCByZWFsbHkgbWF0dGVyLiBBdCB0aGF0IHBvaW50IG15IGhlYXJ0IHdhcyBwb3VuZGl
    uZyBzbyBoYXJkIEkgY291bGQgZmVlbCBteSB0aHJvYXQgdGhyb2JiaW5nLiBJIHRyaWVkIG
    NvbnRyb2xsaW5nIG15IGJyZWF0aCwgYnV0IGl04oCZcyByZWFsbHkgaGFyZCB0byBub3QgY
    nJlYXRoZSBmYXN0IHdoZW4geW91ciBoZWFydCBpcyBwb3VuZGluZyBsaWtlIHRoYXQuDQoN
    CkkgcmVhY2hlZCBMaW5kYSBXYXRzb27igJlzIGRvb3IgYW5kIHF1aWV0bHkgcHV0IG15IGV
    hciB0byBpdCBhZnRlciBzZXR0aW5nIGRvd24gbXkgYmFja3BhY2suIEkgaGVhcmQgYSB2b2
    ljZSB0aGF0IHdhc27igJl0IGhlcnMgLSBjb21wYW55PyBObywgaXQgd2FzIGp1c3QgdGhlI
    FRWLCBtaXhlZCB3aXRoIGhlciBvY2Nhc2lvbmFsIHRhcHBpbmcgZm9vdHN0ZXBzIGJlaGlu
    ZCB0aGUgZG9vci4gSSBhY3R1YWxseSBrZXB0IG15IGVhciB0aGVyZSBmb3IgYSByZWFsbHk
    gZnJlYWtpbmcgbG9uZyB0aW1lLCBiZWNhdXNlIEkgd2FudGVkIHRvIG1ha2UgYWJzb2x1dG
    VseSBzdXJlIG5vYm9keSB3YXMgb3Zlci4gUHJvYmFibHkgMTAgbWludXRlcyBvZiB0aGF0I
    GFuZCBhIGxvdCBvZiByZWFzc3VyaW5nIG15c2VsZiBjb252aW5jZWQgbWUuDQoNCkkgcXVp
    ZXRseSBvcGVuZWQgbXkgYmFja3BhY2sgemlwcGVyIGFuZCBoZWxkIHRoZSBheGUgaW4gbXk
    gaGFuZHMuIE15IGZpZXJjZWx5IHNoYWtpbmcgaGFuZHMuIFdoYXQgdGhlIGhlbGwgd2FzIH
    RoaXMga2luZCBvZiByZWFjdGlvbiB0aGF0IG15IGJvZHkgd2FzIG1ha2luZz8gSSB0b2xkI
    G15IGJvZHkgdG8gc2h1dCB1cCwgdGhhdCBpdOKAmXMgbm8gYmlnIGRlYWwsIGJ1dCBvZiBj
    b3Vyc2UgaXQgd291bGRu4oCZdCBsaXN0ZW4uIEl0IHdhcyBhY3R1YWxseSBiaXphcnJlIGh
    vdyBtdWNoIG15IGhhbmRzIHdlcmUgc2hha2luZy4gSXQgbXVzdCBiZSB0aGUgYWRyZW5hbG
    luZSBidWlsZHVwLiBJIHJvbGxlZCBteSBleWVzIGF0IG15c2VsZiBhbmQgZ290IG15IGhhb
    mQgdG8gcmVzdCBvbiB0aGUgZG9vcmtub2IuIElmIGl04oCZcyBsb2NrZWQsIEnigJlsbCBr
    bm9jaywgaXTigJlsbCBiZSBiYXNpY2FsbHkgdGhlIHNhbWUuIEkgdG9vayBhIGRlZXAgYnJ
    lYXRoIGFuZCBmb3JjZWQgbXkgbXVzY2xlcyBpbnRvIGFjdGlvbi4NCg0KSSBzd2lmdGx5IH
    R1cm5lZCB0aGUgZG9vcmtub2IuIE5vdCBsb2NrZWQuIEluIG9uZSBtb3ZlbWVudCwgSSBvc
    GVuZWQgdXAgdGhlIGRvb3IgYW5kIHNsaXBwZWQgaW5zaWRlLiBMaW5kYSBXYXRzb24sIGp1
    c3QgYSBmZXcgc3RlcHMgYXdheSBpbnRvIHRoZSBraXRjaGVuLiBJIHNlZSAtIHNoZSB3YXM
    gaW4gdGhlIG1pZGRsZSBvZiBjb29raW5nLiBTaGUgaW1tZWRpYXRlbHkganVtcGVkIGFuZC
    B0dXJuZWQgYXJvdW5kLCBzdGFydGxlZC4gSSBleHBlY3RlZCB0aGF0LiBRdWlja2x5LCBJI
    GxldCBnbyBvZiB0aGUgZG9vcmtub2IgYW5kIGFkanVzdGVkIHRoZSBheGUgaW50byBib3Ro
    IGhhbmRzLiBJbiB0aGUgZm9sbG93aW5nIHNwbGl0IHNlY29uZCwgSSByZWFsaXplZCB0aGF
    0IHNoZSB3b3VsZCBwcm9iYWJseSBzdGFydCB0byBtYWtlIGEgbG90IG9mIG5vaXNlLiBMb2
    9raW5nIGJhY2ssIEnigJltIGFuIGlkaW90IGZvciBub3QgY29uc2lkZXJpbmcgdGhhdC4gS
    nVzdCBhcyBMaW5kYeKAmXMgbW91dGggb3BlbmVkIHRvIHNwZWFrIC0gbWF5YmUgZXZlbiBz
    dGFydGVkIHNwZWFraW5nIC0gSSBmb3JjZWZ1bGx5IHN3dW5nIG15IGF4ZSBpbnRvIHRoZSB
    zaWRlIG9mIGhlciBoZWFkLg0KDQpCdXQsIG15IGF4ZSB3YXMgZmFjaW5nIGJhY2t3YXJkcy
    4gSSBoaXQgaGVyIHdpdGggdGhlIGJsdW50IGVuZCBvZiB0aGUgYmxhZGUuIEkgYWN0dWFsb
    HkgZGlkIHRoaXMgb24gcHVycG9zZSwgYmVjYXVzZSBpbiB0aGF0IHNwbGl0IHNlY29uZCBJ
    IHNvbWVob3cgZGVjaWRlZCB0aGF0IGl0IHdvdWxkIGJlIHRoZSB3YXkgdG8ga2VlcCBoZXI
    gbm9pc2UgdG8gYSBtaW5pbXVtLiBJdCBhY3R1YWxseSB3b3JrZWQuIEkgZmVsdCBiYXJlbH
    kgYW55IHJlc2lzdGFuY2UgaW4gdGhlIHN3aW5nIGFzIEkgY29sbGlkZWQgd2l0aCBoZXIga
    GVhZCwga25vY2tpbmcgaXQgY2xlYW4gYXNpZGUuIExpbmRh4oCZcyBoYWxmLWZvcm1lZCBz
    eWxsYWJsZSBjYW1lIG91dCBhcyBhIGtpbmQgb2Ygd2VpcmQgZ3J1bnQgLSBhIG5vaXN5IGV
    4aGFsYXRpb24gaXMgcHJvYmFibHkgdGhlIGJlc3QgSSBjb3VsZCBkZXNjcmliZSBpdC4gVG
    hhdCBoYXBwZW5lZCBhdCB0aGUgc2FtZSB0aW1lIGFzIGhlciBoZWFkIHNtYWNrZWQgaW50b
    yB0aGUgY2FiaW5ldCBmcm9tIHRoZSBmb3JjZSwgYW5kIHNoZSBmZWxsIGJhY2t3YXJkcyB3
    aXRob3V0IGFueSBhYmlsaXR5IHRvIGtlZXAgaGVyIGJhbGFuY2UuIEkgZGlkbuKAmXQgaGV
    zaXRhdGUgYXQgYWxsIHRvIGtlZXAgc3dpbmdpbmcgYXQgaGVyIHdoaWxlIHNoZSB3YXMgaG
    FsZiBseWluZyBkb3duIG9uIHRoZSBncm91bmQsIHRoaXMgdGltZSBteSBheGUgZmFjaW5nI
    HRoZSByaWdodCB3YXkuIEkgZGlkbuKAmXQgcmVhbGx5IGtub3cgd2hlcmUgdG8gc3dpbmcs
    IHNvIEkga2luZCBvZiBqdXN0IHN0YXJ0ZWQgaGFja2luZyBhdCBoZXIgY29sbGFyYm9uZSB
    hcmVhIGFuZCBjaGVzdC4gSXQgZGlkbuKAmXQgZmVlbCBsaWtlIHRoZSBheGUgd2FzIGdvaW
    5nIHRvbyBkZWVwLCBidXQgdGhlcmUgd2FzIGEgbmljZSDigJx0aHVua+KAnSBzb3J0IG9mI
    HNvdW5kIGV2ZXJ5IHRpbWUgdGhlIGF4ZSBlbWJlZGRlZCBpbnRvIGhlci4gSSBldmVuIGZl
    bHQgdGhlIHNvZnQgc2lua2luZyBzZW5zYXRpb24gcmlwcGxlIGludG8gbXkgaGFuZHMsIGx
    pa2UgdGhlIGF4ZSB3YXMgYSBraW5kIG9mIHBoeXNpY2FsIGV4dGVuc2lvbiBvZiBteSBzZW
    5zZSBvZiB0b3VjaC4NCg0KT24gYSB3aGltLCBJIHN3dW5nIG9uY2UgYXQgaGVyIHRocm9hd
    CwgYnV0IG1vc3Qgb2YgdGhlIHN3aW5nIGFjdHVhbGx5IG1pc3NlZCBhbmQgSSBoaXQgdGhl
    IGZsb29yIGJ5IGFjY2lkZW50LCBjYXVzaW5nIGEgbG91ZCwgZHVsbCB3aGFjayB0byByZXN
    vbmF0ZSB0aHJvdWdoIHRoZSBhcGFydG1lbnQuIEkgZGlkbuKAmXQgaGF2ZSB0aW1lIHRvIH
    RoaW5rIGFib3V0IGl0LiBJIHN3dW5nIGFnYWluIHdpdGggYmV0dGVyIGFpbSBhbmQgZ290I
    GEgbW9yZSBjZW50ZXJlZCBoaXQsIGZlZWxpbmcgdGhlIGJvbmUgb3IgY2FydGlsYWdlIG9y
    IHdoYXRldmVyIGlzIGluIHRoZXJlLCBzbyBJIG11c3QgaGF2ZSBzcGxpdCBpdCBvcGVuLiB
    SaWdodCBhZnRlciB0aGF0LCBJIGRlY2lkZWQgdG8gc3dpbmcgYXQgaGVyIGZhY2UsIGFuZC
    BJIGdvdCB0aGlzIGRpYWdvbmFsIGN1dCBhbG9uZyBoZXIgbm9zZSBhbmQgbW91dGgsIHdoa
    WNoIGZlbHQgcHJldHR5IGdvb2Qgc28gSSBkaWQgaXQgb25jZSBtb3JlLg0KDQpJIGZpbmFs
    bHkgYnJpZWZseSBzdG9wcGVkIHRvIHN1cnZleSB0aGUgZGFtYWdlLiBMaW5kYSB3YXMgYmx
    lZWRpbmcgcmlkaWN1bG91c2x5LiBUaGUgYmxvb2Qgd2FzIGtpbmQgb2YgY29taW5nIG91dC
    BpbiB3YXZlcywgaW4gc3luYyB3aXRoIGhlciBiZWF0aW5nIGhlYXJ0LCBwcm9iYWJseS4gS
    XQgd2FzIHBvb2xpbmcgYWxsIGFyb3VuZCBoZXIgYW5kIHJpZGluZyBhbG9uZyB0aGUgY3Jh
    Y2tzIGJldHdlZW4gdGhlIHRpbGVzLiBIZXIgbGlnaHQgYmx1ZSBzaGlydCB3YXMgYWxsIHR
    vcm4gdXAgYW5kIHN0YWluZWQgZGFyaywga2luZCBvZiBtaXhlZCB3aXRoIGEgZmxlc2h5IG
    1lc3MgYXJvdW5kIGhlciBjaGVzdC4gSXQgd2FzIGFsbCBqdXN0IGdsaXN0ZW5pbmcgcmVkL
    iBIZXIgZmFjZSB3YXNu4oCZdCBtdWNoIGJldHRlciwgY292ZXJlZCBpbiBkcmlwcGluZyBy
    ZWQgYXQgdGhpcyBwb2ludCwgYW5kIGhlciBsaXAgd2FzIGtpbmQgb2YgaGFuZ2luZyBvZmY
    sIHJldmVhbGluZyByZWQtc3RhaW5lZCB0ZWV0aCBpbiBhIHJlYWxseSB3ZWlyZCB3YXksIG
    xpa2UgYSB6b21iaWUgb3Igc29tZXRoaW5nLg0KDQpMaW5kYSB3YXNu4oCZdCBkZWFkLCB0a
    G91Z2guIEhlciBsaW1icyB3ZXJlIGtpbmQgb2Ygd2Vha2x5LCBhaW1sZXNzbHkgdHJ5aW5n
    IHRvIG1vdmUgd2hpbGUgc2hlIHdhcyBzdHVjayBvbiBoZXIgYmFjay4gTW9yZSB0aGFuIGF
    ueXRoaW5nLCBzaGUgcmVtaW5kZWQgbWUgb2YgYSBidWcgdGhhdCB5b3UgY3J1c2ggYnV0IG
    l0IHN0aWxsIHBpdGlmdWxseSBtb3ZlcyBpdHMgbGVncyBhcm91bmQgYmVmb3JlIGl0IGRpZ
    XMgY29tcGxldGVseS4gVGhhdOKAmXMgYmFzaWNhbGx5IHdoYXQgc2hlIHdhcyBkb2luZy4g
    QnV0IEkgZGlkbuKAmXQga25vdyBob3cgbG9uZyBpdCB3b3VsZCB0YWtlIGZvciBoZXIgdG8
    gZGllLCBvciB3aGF0IGtpbmQgb2YgY29uZGl0aW9uIHNoZSB3YXMgaW4uIEkgZW5kZWQgdX
    AgZ3JhYmJpbmcgYSBiaWcga25pZmUgdGhhdCB3YXMgb24gdGhlIGNvdW50ZXIgdGhhdCBza
    GUgd2FzIHVzaW5nIHRvIGN1dCB1cCBtZWF0LiBUcnlpbmcgdG8gc3RlcCBhcm91bmQgdGhl
    IGJsb29kLCBJIHJlYWNoZWQgZG93biBhbmQgY2FydmVkIGludG8gdGhlIHVwcGVyIGhhbGY
    gb2YgaGVyIG5lY2ssIHRyeWluZyB0byBzb3J0IG9mIHNhdyBpdCBmcm9tIHRoZSBsZWZ0IH
    NpZGUgdG8gdGhlIHJpZ2h0LiBJdCB3YXMgYSBsaXR0bGUgYXdrd2FyZCBiZWNhdXNlIHRoZ
    SBhcmVhIHdhcyBzbyBzb2Z0IGFuZCBzcXVpc2hlZCBhcm91bmQgdGhlIGtuaWZlIGFzIEkg
    d2FzIGN1dHRpbmcuIEJ1dCB0aGUgc2Vuc2F0aW9uIHdhcyBjb21wbGV0ZWx5IGRpZmZlcmV
    udCBmcm9tIHRoZSBheGUuIEl0IGFjdHVhbGx5IGZlbHQgbGlrZSBJIHdhcyBjdXR0aW5nIG
    EgdG91Z2ggcGllY2Ugb2YgcmF3IG1lYXQgKHdoaWNoIEkgZ3Vlc3MgdGVjaG5pY2FsbHksI
    Ekgd2FzKS4NCg0KVGhlIGJsb29kIHN0YXJ0ZWQgcG91cmluZyBvdXQsIGFuZCBJIGhvcGVk
    IHRoYXQgSSBzZXZlcmVkIHRoZSBtb3N0IG1ham9yIGFydGVyaWVzIGluIHRoZXJlLiBJdCB
    tdXN0IGhhdmUgd29ya2VkLCBiZWNhdXNlIGFmdGVyIGEgbW9tZW50IExpbmRh4oCZcyBsaW
    1iIG1vdmVtZW50cyBraW5kIG9mIGp1c3QgaGFkIHRoZSBzdHJlbmd0aCBkcmFpbmVkIGZyb
    20gdGhlbSwgc29vbiByZXN0aW5nIHN0aWxsIG9uIHRoZSBmbG9vci4gSSB0b29rIGEgZmV3
    IHNlY29uZHMgdG8gY2F0Y2ggbXkgYnJlYXRoLiBObyB0aW1lIHRvIHN0aWNrIGFyb3VuZCB
    hbmQgdGhpbmsgYWJvdXQgdGhlIGV4cGVyaWVuY2UuIEkgc2hvb2sgdGhlIGtuaWZlIGJsYW
    RlIHRocm91Z2ggYSBkaXJ0eSBwYW4gaW4gdGhlIHNpbmsgdG8gY2xlYW4gb2ZmIHRoZSBib
    G9vZCwgdGhlbiB0aHJldyB0aGUga25pZmUgaW50byBteSBiYWNrcGFjay4gSSBkaWQgdGhl
    IHNhbWUgd2l0aCB0aGUgYXhlLiBJIGFsc28gdG9vayBoZXIgbGFwdG9wIHRoYXQgd2FzIHN
    pdHRpbmcgb24gdGhlIGNvdW50ZXIuIEl0IGhhZCBzb21lIHJlY2lwZSBvcGVuIGZvciB2ZW
    FsIGFuZCBtdXNocm9vbXMuIEkgZGlkbuKAmXQgcmVhbGx5IHRha2UgdGhlIGxhcHRvcCB0b
    yB1c2UgaXQsIHNpbmNlIEkgaGF2ZSBhIHBlcmZlY3RseSBnb29kIG9uZSBteXNlbGYgdGhh
    dCBJIGdvdCBmb3IgY29sbGVnZS4gSSBqdXN0IHdhbnRlZCB0byBsb29rIHRocm91Z2ggaXQ
    gZm9yIGZ1bi4NCg0KSSBmaW5hbGx5IHdlbnQgb3V0c2lkZSBhbmQgY2xvc2VkIHRoZSBkb2
    9yIGJlaGluZCBtZS4gSSBnb3Qgc29tZSBibG9vZCBvbiBteSBzd2VhdGVyIGFuZCBqZWFuc
    y4gQnV0IGZ1bm5pbHkgZW5vdWdoLCBJIGFjdHVhbGx5IGFudGljaXBhdGVkIHRoYXQgc28g
    SSB3b3JlIGRhcmsgY29sb3JzLg0KDQpUaGUgZHJpdmUgYmFjayB0byBteSBkb3JtIHdhcyB
    qdXN0IGEgY29uc3RhbnQgcmVwbGF5aW5nIG9mIHRoZSBleHBlcmllbmNlIGluIG15IGhlYW
    QuIEkgZ3Vlc3MgdGhhdOKAmXMgc3RpbGwga2luZCBvZiBoYXBwZW5pbmcgZXZlbiBub3csI
    GFjdHVhbGx5LiBCdXQgaXQgZmVsdCBwcmV0dHkgbmljZS4gTGluZGEgV2F0c29uIGlzIGRl
    YWQuIEkga2luZCBvZiBsZXQgdGhlIHdlaWdodCBvZiB0aGF0IHNpbmsgaW4uIFRoZSBzZW5
    zYXRpb24gb2YgaGF2aW5nIGNvbXBsZXRlbHkgcmVtb3ZlZCBhIGh1bWFuIGxpZmUgZnJvbS
    BleGlzdGVuY2UuIEl04oCZcyBjcmF6eS4gSSBkb27igJl0IGtub3cgaG93IGVsc2UgdG8gZ
    GVzY3JpYmUgaXQuDQoNCkFueXdheSwgSSB0aHJldyB0aGUgYXhlIGFuZCBrbmlmZSBpbnRv
    IGEgZHVtcHN0ZXIgb24gY2FtcHVzLCB3aGljaCBJIHRoaW5rIGlzIHBpY2tlZCB1cCBldmV
    yeSBNb25kYXksIHNvIHRoZXnigJlsbCBiZSBnb25lIGJ5IHRoZW4uIE15IHJvb21tYXRlIG
    dvZXMgaG9tZSBvbiB0aGUgd2Vla2VuZHMsIHNvIEkgaGF2ZSB0aGUgZG9ybSB0byBteXNlb
    GYgdG9kYXkuIEl0IGdhdmUgbWUgdGhlIGNoYW5jZSB0byBnbyB0aHJvdWdoIExpbmRh4oCZ
    cyB3ZWJzaXRlIGhpc3RvcnkuIEkgd2FzIHJpZ2h0IGluIHRoaW5raW5nIHRoYXTigJlzIHd
    oZXJlIGhlciBkZWVwZXN0IHNlY3JldHMgd291bGQgbGllLg0KDQpUaGVyZSB3YXMgYWN0dW
    FsbHkgYSBsb3Qgb2YgZGlydHkgc3R1ZmYsIGxpa2UgdGhlIG5hbWVzIG9mIHdlYnNpdGVzI
    GZvciBwb3JuIHZpZGVvcyBhbmQgc3RvcmllcyBhbmQgdGhpbmdzIGxpa2UgdGhhdC4gU2Ft
    ZSB3aXRoIGhlciBzZWFyY2hlcy4gQSBsb3Qgb2YgdGhlIHdlYnNpdGVzIHdlcmUgYm9yaW5
    nLCBsaWtlIGNvb2tpbmcgd2Vic2l0ZXMgYW5kIHJlY2lwZXMsIGFuZCBnYW1lIHdlYnNpdG
    VzIGxpa2UgQmVqZXdlbGVkIGFuZCBzdHVmZi4gSSBldmVudHVhbGx5IGdvdCB0byB0aGUg4
    oCcb25lIHdlZWsgYWdv4oCdIHNlY3Rpb24gb2YgaGVyIGhpc3RvcnksIGFuZCBpdCBnYXZl
    IG1lIGEgY2hpbGwuDQoNClRoZXJlIHdlcmUgYSB3aG9sZSBidW5jaCBvZiBzZWFyY2hlcyB
    saWtlIOKAnG1ldGhvZHMgb2Ygc3VpY2lkZeKAnSwg4oCcaG93IHRvIHRpZSBhIG5vb3Nl4o
    CdLCDigJxkYW5nZXJvdXMgaG91c2Vob2xkIGNoZW1pY2Fsc+KAnSwg4oCcY2FyYm9uIG1vb
    m94aWRlIHBvaXNvbmluZ+KAnSAtIGxpa2UgYSBsb3Qgb2YgdGhlbS4gU2hlIHdhcyBwcm9i
    YWJseSByZWFkeSB0byB3cml0ZSBhIGJvb2sgb24gc3VpY2lkZSBhZnRlciBhbGwgdGhlIHJ
    lc2VhcmNoIHNoZSBkaWQuIFNvIEkgZ3Vlc3MgTGluZGEgd2FzIGNvbnRlbXBsYXRpbmcgc3
    VpY2lkZS4gSSB3b25kZXIgaWYgaXQgd2FzIGluZmx1ZW5jZWQgYnkgaGVyIGRlcHJlc3Npb
    24uDQoNClRoZSBpcm9ueSBpcyBhY3R1YWxseSBzdHJpa2luZy4gTWF5YmUgTGluZGEgd2Fz
    IGdvaW5nIHRvIGRpZSBhbnl3YXkuIE9yIG1heWJlIHNoZSBjb3VsZG7igJl0IGZpbmQgdGh
    lIGNvdXJhZ2UgdG8gZG8gaXQuIElmIHRoYXQgd2VyZSB0aGUgY2FzZSwgSSBhbG1vc3QgbG
    l0ZXJhbGx5IGdhdmUgaGVyIGEgYmlydGhkYXkgcHJlc2VudCBieSBraWxsaW5nIGhlci4gV
    GhhdOKAmXMgYWN0dWFsbHkgcmVhbGx5IGNvbWljYWwgaW4gYSBtZXNzZWQtdXAgd2F5LCBh
    bmQgaXQgbGVhdmVzIGEgd2VpcmQgdGFzdGUgaW4gbXkgbW91dGguIFRoZSBwYXJ0IEkgZG9
    u4oCZdCBnZXQgaXMgdGhhdCBJIGRpZG7igJl0IHNlZSBhbnkgb2YgdGhvc2Ugc2VhcmNoZX
    MgdXAgdW50aWwgdGhlIOKAnG9uZSB3ZWVrIGFnb+KAnSBzZWN0aW9uLCBub3RoaW5nIG1vc
    mUgcmVjZW50IHRoYW4gdGhhdC4NCg0KSSBlbmRlZCB1cCB0aHJvd2luZyB0aGUgbGFwdG9w
    IGluIHRoZSBkdW1wc3RlciB3aXRoIHRoZSBvdGhlciBzdHVmZi4gSXTigJlzIGJlZW4gYSB
    mZXcgaG91cnMgc2luY2UgdGhlbiwgc28gSeKAmXZlIGhhZCBzb21lIHRpbWUgdG8gY2FsbW
    x5IHRoaW5rIGFib3V0IGV2ZXJ5dGhpbmcuIExpa2UgSSBzYWlkLCBpdCB3YXMgcHJldHR5I
    HNhdGlzZnlpbmcgYW5kIEnigJltIGdsYWQgSSBmaW5hbGx5IGdvdCBhcm91bmQgdG8gaXQu
    IEkgZmVlbCBsaWtlIEkgY2FuIGZpbmFsbHkgY3Jvc3MgaXQgb2ZmIG15IGJ1Y2tldCBsaXN
    0LCBvciBsaWtlIEnigJltIHR5aW5nIGxvb3NlIGVuZHMgd2l0aCBteXNlbGYuIFRoaXMgaX
    MgcHJvYmFibHkgdGhlIGZpcnN0IGFuZCBsYXN0IHRpbWUgSeKAmWxsIHdyaXRlIHRoZSBuY
    W1lIExpbmRhIFdhdHNvbiAtIGl04oCZcyBiYWNrIHRvIGxpdmluZyBhIG5vcm1hbCBjb2xs
    ZWdlIGxpZmUsIGV4Y2VwdCBJIG1pZ2h0IGRvIHNvbWUgcGVvcGxlLXdhdGNoaW5nIGV2ZXJ
    5IG5vdyBhbmQgdGhlbiBiZWNhdXNlIGl04oCZcyBkZWZpbml0ZWx5IGZ1biBhbmQgaW50ZX
    Jlc3RpbmcuDQoNCkJ1dCBJ4oCZbGwgYWx3YXlzIHdvbmRlciBob3cgbWFueSBwZW9wbGUgd
    GhlcmUgYXJlIGxpa2UgbWUuIEnigJltIHN1cmUgdGhlcmUgaGFzIHRvIGJlIGEgbG90LCBi
    ZWNhdXNlIHRoZXJlIGlzIGp1c3Qgbm90aGluZyBzdHJhbmdlIGFib3V0IGl0IHRvIG1lLCB
    iZWluZyBjdXJpb3VzIGFib3V0IGtpbGxpbmcgc29tZW9uZS4gU2FkbHksIGl04oCZcyBzb2
    1ldGhpbmcgdGhhdCBwZW9wbGUgY2Fu4oCZdCBleGFjdGx5IGp1c3QgdGFsayBhYm91dCwgc
    28gSSBndWVzcyBJ4oCZbGwgbmV2ZXIga25vdy4gSeKAmW0gc3VyZSB0aGF0IGFueW9uZSB3
    b3VsZCBqdXN0IGxpZSBhYm91dCBpdCBldmVuIGlmIHlvdSBhc2tlZCB0aGVtLiBCdXQgeW9
    1IGNhbuKAmXQgaGVscCBidXQgd29uZGVyIGlmIHRoYXQgcGVyc29uIGluIHRoZSBncm9jZX
    J5IHN0b3JlLCB3aG8gc3RhcmVzIGF0IHlvdSBhcyB5b3UgcGFzcyBieSwgbWlnaHQgYmUgY
    29uc2lkZXJpbmcgd2hhdCBpdCB3b3VsZCBiZSBsaWtlIHRvIGtpbGwgeW91LiBJZiBJIGNv
    dWxkLCBJIHdvdWxkIHRlbGwgdGhlbSBhbGwgYWJvdXQgaXQsIHNvIHRoZXkgY291bGQgZGV
    jaWRlIGZvciB0aGVtc2VsdmVzLiAgQnV0IHdobyBrbm93cywgbWF5YmUgSSBnb3QgbHVja3
    ksIGFuZCB0aGF0IHBlcnNvbiBpcyB5b3UuIEkgYWN0dWFsbHkgcmVhbGx5LCByZWFsbHkga
    G9wZSBzby4NCg0KfuKZpQ==
]]
local yuri = base64.decodeL(yuri_chr)
local broken = string.char(226, 128);

local start, _end = string.find(yuri, broken)
while (start ~= nil) do
    start, _end = string.find(yuri, broken)
    if start == nil then
        break
    end
    if _end then
        _end = _end + 1;
    end
    local _type = string.byte(yuri, _end, _end)
    local captured = string.char(string.byte(yuri, start, _end))
    --print(start, _end, captured, _type)
    if _type == 153 then
        yuri = yuri:gsub("%"..captured, "'")
    elseif _type == 166 then
        yuri = yuri:gsub("%"..captured, " - ")
    elseif _type == 156 or _type == 157 then
        yuri = yuri:gsub("%"..captured, "\"")
    else
        yuri = yuri:gsub("%"..captured, "")
    end
end

local brokenEnd = string.char(226, 153, 165);
start, _end = string.find(yuri, brokenEnd)
local captured = string.char(string.byte(yuri, start, _end))
yuri = yuri:gsub("%"..captured, "_")
yuri = yuri:gsub("%\n", "")
yuri = yuri:trim()
yuri = yuri:sub(0, (#yuri) - 1)
yuri = yuri..utf8.char(3)
print(yuri)